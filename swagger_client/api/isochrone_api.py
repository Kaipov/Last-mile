# coding: utf-8

"""
    GraphHopper Directions API

    You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class IsochroneApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def isochrone_get(self, point, key, **kwargs):  # noqa: E501
        """Isochrone Request  # noqa: E501

        The GraphHopper Isochrone API allows calculating an isochrone of a locations means to calculate 'a line connecting points at which a vehicle arrives at the same time,' see [Wikipedia](http://en.wikipedia.org/wiki/Isochrone_map). It is also called **reachability** or **walkability**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.isochrone_get(point, key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str point: Specify the start coordinate (required)
        :param str key: Get your key at graphhopper.com (required)
        :param int time_limit: Specify which time the vehicle should travel. In seconds.
        :param int distance_limit: Specify which distance the vehicle should travel. In meter.
        :param str vehicle: Possible vehicles are bike, car, foot and [more](https://graphhopper.com/api/1/docs/supported-vehicle-profiles/)
        :param int buckets: For how many sub intervals an additional polygon should be calculated.
        :param bool reverse_flow: If `false` the flow goes from point to the polygon, if `true` the flow goes from the polygon \"inside\" to the point. Example usage for `false`&#58; *How many potential customer can be reached within 30min travel time from your store* vs. `true`&#58; *How many customers can reach your store within 30min travel time.*
        :param str weighting: Can be fastest or shortest
        :return: IsochroneResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.isochrone_get_with_http_info(point, key, **kwargs)  # noqa: E501
        else:
            (data) = self.isochrone_get_with_http_info(point, key, **kwargs)  # noqa: E501
            return data

    def isochrone_get_with_http_info(self, point, key, **kwargs):  # noqa: E501
        """Isochrone Request  # noqa: E501

        The GraphHopper Isochrone API allows calculating an isochrone of a locations means to calculate 'a line connecting points at which a vehicle arrives at the same time,' see [Wikipedia](http://en.wikipedia.org/wiki/Isochrone_map). It is also called **reachability** or **walkability**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.isochrone_get_with_http_info(point, key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str point: Specify the start coordinate (required)
        :param str key: Get your key at graphhopper.com (required)
        :param int time_limit: Specify which time the vehicle should travel. In seconds.
        :param int distance_limit: Specify which distance the vehicle should travel. In meter.
        :param str vehicle: Possible vehicles are bike, car, foot and [more](https://graphhopper.com/api/1/docs/supported-vehicle-profiles/)
        :param int buckets: For how many sub intervals an additional polygon should be calculated.
        :param bool reverse_flow: If `false` the flow goes from point to the polygon, if `true` the flow goes from the polygon \"inside\" to the point. Example usage for `false`&#58; *How many potential customer can be reached within 30min travel time from your store* vs. `true`&#58; *How many customers can reach your store within 30min travel time.*
        :param str weighting: Can be fastest or shortest
        :return: IsochroneResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['point', 'key', 'time_limit', 'distance_limit', 'vehicle', 'buckets', 'reverse_flow', 'weighting']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method isochrone_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'point' is set
        if ('point' not in params or
                params['point'] is None):
            raise ValueError("Missing the required parameter `point` when calling `isochrone_get`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `isochrone_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'point' in params:
            query_params.append(('point', params['point']))  # noqa: E501
        if 'time_limit' in params:
            query_params.append(('time_limit', params['time_limit']))  # noqa: E501
        if 'distance_limit' in params:
            query_params.append(('distance_limit', params['distance_limit']))  # noqa: E501
        if 'vehicle' in params:
            query_params.append(('vehicle', params['vehicle']))  # noqa: E501
        if 'buckets' in params:
            query_params.append(('buckets', params['buckets']))  # noqa: E501
        if 'reverse_flow' in params:
            query_params.append(('reverse_flow', params['reverse_flow']))  # noqa: E501
        if 'weighting' in params:
            query_params.append(('weighting', params['weighting']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/isochrone', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IsochroneResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
