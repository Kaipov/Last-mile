# coding: utf-8

"""
    GraphHopper Directions API

    You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RoutingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def route_get(self, point, points_encoded, key, **kwargs):  # noqa: E501
        """Routing Request  # noqa: E501

        The GraphHopper Routing API allows to calculate route and implement navigation via the turn instructions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.route_get(point, points_encoded, key, async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] point: Specify multiple points for which the route should be calculated. The order is important. Specify at least two points. (required)
        :param bool points_encoded: IMPORTANT- TODO - currently you have to pass false for the swagger client - Have not found a way to force add a parameter. If `false` the coordinates in `point` and `snapped_waypoints` are returned as array using the order [lon,lat,elevation] for every point. If `true` the coordinates will be encoded as string leading to less bandwith usage. You'll need a special handling for the decoding of this string on the client-side. We provide open source code in [Java](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/java/com/graphhopper/http/WebHelper.java#L43) and [JavaScript](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/webapp/js/ghrequest.js#L139). It is especially important to use no 3rd party client if you set `elevation=true`! (required)
        :param str key: Get your key at graphhopper.com (required)
        :param str locale: The locale of the resulting turn instructions. E.g. `pt_PT` for Portuguese or `de` for German
        :param bool instructions: If instruction should be calculated and returned
        :param str vehicle: The vehicle for which the route should be calculated. Other vehicles are foot, small_truck, ...
        :param bool elevation: If `true` a third dimension - the elevation - is included in the polyline or in the GeoJson. If enabled you have to use a modified version of the decoding method or set points_encoded to `false`. See the points_encoded attribute for more details. Additionally a request can fail if the vehicle does not support elevation. See the features object for every vehicle.
        :param bool calc_points: If the points for the route should be calculated at all printing out only distance and time.
        :param list[str] point_hint: Optional parameter. Specifies a hint for each `point` parameter to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.
        :param bool ch_disable: Use this parameter in combination with one or more parameters of this table
        :param str weighting: Which kind of 'best' route calculation you need. Other option is `shortest` (e.g. for `vehicle=foot` or `bike`), `short_fastest` if time and distance is expensive e.g. for `vehicle=truck`
        :param bool edge_traversal: Use `true` if you want to consider turn restrictions for bike and motor vehicles. Keep in mind that the response time is roughly 2 times slower.
        :param str algorithm: The algorithm to calculate the route. Other options are `dijkstra`, `astar`, `astarbi`, `alternative_route` and `round_trip`
        :param int heading: Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points. In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree. This parameter also influences the tour generated with `algorithm=round_trip` and force the initial direction.
        :param int heading_penalty: Penalty for omitting a specified heading. The penalty corresponds to the accepted time delay in seconds in comparison to the route without a heading.
        :param bool pass_through: If `true` u-turns are avoided at via-points with regard to the `heading_penalty`.
        :param list[str] details: List of additional trip attributes to be returned. Try some of the following: `average_speed`, `street_name`, `edge_id`, `time`, `distance`.
        :param int round_trip_distance: If `algorithm=round_trip` this parameter configures approximative length of the resulting round trip
        :param int round_trip_seed: If `algorithm=round_trip` this parameter introduces randomness if e.g. the first try wasn't good.
        :param int alternative_route_max_paths: If `algorithm=alternative_route` this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives.
        :param int alternative_route_max_weight_factor: If `algorithm=alternative_route` this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives.
        :param int alternative_route_max_share_factor: If `algorithm=alternative_route` this parameter specifies how much alternatives routes can have maximum in common with the optimal route. Increasing can lead to worse alternatives.
        :param str avoid: comma separate list to avoid certain roads. You can avoid motorway, ferry, tunnel or track
        :return: RouteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.route_get_with_http_info(point, points_encoded, key, **kwargs)  # noqa: E501
        else:
            (data) = self.route_get_with_http_info(point, points_encoded, key, **kwargs)  # noqa: E501
            return data

    def route_get_with_http_info(self, point, points_encoded, key, **kwargs):  # noqa: E501
        """Routing Request  # noqa: E501

        The GraphHopper Routing API allows to calculate route and implement navigation via the turn instructions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.route_get_with_http_info(point, points_encoded, key, async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] point: Specify multiple points for which the route should be calculated. The order is important. Specify at least two points. (required)
        :param bool points_encoded: IMPORTANT- TODO - currently you have to pass false for the swagger client - Have not found a way to force add a parameter. If `false` the coordinates in `point` and `snapped_waypoints` are returned as array using the order [lon,lat,elevation] for every point. If `true` the coordinates will be encoded as string leading to less bandwith usage. You'll need a special handling for the decoding of this string on the client-side. We provide open source code in [Java](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/java/com/graphhopper/http/WebHelper.java#L43) and [JavaScript](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/webapp/js/ghrequest.js#L139). It is especially important to use no 3rd party client if you set `elevation=true`! (required)
        :param str key: Get your key at graphhopper.com (required)
        :param str locale: The locale of the resulting turn instructions. E.g. `pt_PT` for Portuguese or `de` for German
        :param bool instructions: If instruction should be calculated and returned
        :param str vehicle: The vehicle for which the route should be calculated. Other vehicles are foot, small_truck, ...
        :param bool elevation: If `true` a third dimension - the elevation - is included in the polyline or in the GeoJson. If enabled you have to use a modified version of the decoding method or set points_encoded to `false`. See the points_encoded attribute for more details. Additionally a request can fail if the vehicle does not support elevation. See the features object for every vehicle.
        :param bool calc_points: If the points for the route should be calculated at all printing out only distance and time.
        :param list[str] point_hint: Optional parameter. Specifies a hint for each `point` parameter to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.
        :param bool ch_disable: Use this parameter in combination with one or more parameters of this table
        :param str weighting: Which kind of 'best' route calculation you need. Other option is `shortest` (e.g. for `vehicle=foot` or `bike`), `short_fastest` if time and distance is expensive e.g. for `vehicle=truck`
        :param bool edge_traversal: Use `true` if you want to consider turn restrictions for bike and motor vehicles. Keep in mind that the response time is roughly 2 times slower.
        :param str algorithm: The algorithm to calculate the route. Other options are `dijkstra`, `astar`, `astarbi`, `alternative_route` and `round_trip`
        :param int heading: Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points. In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree. This parameter also influences the tour generated with `algorithm=round_trip` and force the initial direction.
        :param int heading_penalty: Penalty for omitting a specified heading. The penalty corresponds to the accepted time delay in seconds in comparison to the route without a heading.
        :param bool pass_through: If `true` u-turns are avoided at via-points with regard to the `heading_penalty`.
        :param list[str] details: List of additional trip attributes to be returned. Try some of the following: `average_speed`, `street_name`, `edge_id`, `time`, `distance`.
        :param int round_trip_distance: If `algorithm=round_trip` this parameter configures approximative length of the resulting round trip
        :param int round_trip_seed: If `algorithm=round_trip` this parameter introduces randomness if e.g. the first try wasn't good.
        :param int alternative_route_max_paths: If `algorithm=alternative_route` this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives.
        :param int alternative_route_max_weight_factor: If `algorithm=alternative_route` this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives.
        :param int alternative_route_max_share_factor: If `algorithm=alternative_route` this parameter specifies how much alternatives routes can have maximum in common with the optimal route. Increasing can lead to worse alternatives.
        :param str avoid: comma separate list to avoid certain roads. You can avoid motorway, ferry, tunnel or track
        :return: RouteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['point', 'points_encoded', 'key', 'locale', 'instructions', 'vehicle', 'elevation', 'calc_points', 'point_hint', 'ch_disable', 'weighting', 'edge_traversal', 'algorithm', 'heading', 'heading_penalty', 'pass_through', 'details', 'round_trip_distance', 'round_trip_seed', 'alternative_route_max_paths', 'alternative_route_max_weight_factor', 'alternative_route_max_share_factor', 'avoid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method route_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'point' is set
        if ('point' not in params or
                params['point'] is None):
            raise ValueError("Missing the required parameter `point` when calling `route_get`")  # noqa: E501
        # verify the required parameter 'points_encoded' is set
        if ('points_encoded' not in params or
                params['points_encoded'] is None):
            raise ValueError("Missing the required parameter `points_encoded` when calling `route_get`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `route_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'point' in params:
            query_params.append(('point', params['point']))  # noqa: E501
            collection_formats['point'] = 'multi'  # noqa: E501
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501
        if 'instructions' in params:
            query_params.append(('instructions', params['instructions']))  # noqa: E501
        if 'vehicle' in params:
            query_params.append(('vehicle', params['vehicle']))  # noqa: E501
        if 'elevation' in params:
            query_params.append(('elevation', params['elevation']))  # noqa: E501
        if 'points_encoded' in params:
            query_params.append(('points_encoded', params['points_encoded']))  # noqa: E501
        if 'calc_points' in params:
            query_params.append(('calc_points', params['calc_points']))  # noqa: E501
        if 'point_hint' in params:
            query_params.append(('point_hint', params['point_hint']))  # noqa: E501
            collection_formats['point_hint'] = 'multi'  # noqa: E501
        if 'ch_disable' in params:
            query_params.append(('ch.disable', params['ch_disable']))  # noqa: E501
        if 'weighting' in params:
            query_params.append(('weighting', params['weighting']))  # noqa: E501
        if 'edge_traversal' in params:
            query_params.append(('edge_traversal', params['edge_traversal']))  # noqa: E501
        if 'algorithm' in params:
            query_params.append(('algorithm', params['algorithm']))  # noqa: E501
        if 'heading' in params:
            query_params.append(('heading', params['heading']))  # noqa: E501
        if 'heading_penalty' in params:
            query_params.append(('heading_penalty', params['heading_penalty']))  # noqa: E501
        if 'pass_through' in params:
            query_params.append(('pass_through', params['pass_through']))  # noqa: E501
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
            collection_formats['details'] = 'multi'  # noqa: E501
        if 'round_trip_distance' in params:
            query_params.append(('round_trip.distance', params['round_trip_distance']))  # noqa: E501
        if 'round_trip_seed' in params:
            query_params.append(('round_trip.seed', params['round_trip_seed']))  # noqa: E501
        if 'alternative_route_max_paths' in params:
            query_params.append(('alternative_route.max_paths', params['alternative_route_max_paths']))  # noqa: E501
        if 'alternative_route_max_weight_factor' in params:
            query_params.append(('alternative_route.max_weight_factor', params['alternative_route_max_weight_factor']))  # noqa: E501
        if 'alternative_route_max_share_factor' in params:
            query_params.append(('alternative_route.max_share_factor', params['alternative_route_max_share_factor']))  # noqa: E501
        if 'avoid' in params:
            query_params.append(('avoid', params['avoid']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/route', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RouteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
