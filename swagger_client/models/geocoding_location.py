# coding: utf-8

"""
    GraphHopper Directions API

    You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.geocoding_point import GeocodingPoint  # noqa: F401,E501


class GeocodingLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'point': 'GeocodingPoint',
        'osm_id': 'str',
        'osm_type': 'str',
        'osm_key': 'str',
        'name': 'str',
        'country': 'str',
        'city': 'str',
        'state': 'str',
        'street': 'str',
        'housenumber': 'str',
        'postcode': 'str'
    }

    attribute_map = {
        'point': 'point',
        'osm_id': 'osm_id',
        'osm_type': 'osm_type',
        'osm_key': 'osm_key',
        'name': 'name',
        'country': 'country',
        'city': 'city',
        'state': 'state',
        'street': 'street',
        'housenumber': 'housenumber',
        'postcode': 'postcode'
    }

    def __init__(self, point=None, osm_id=None, osm_type=None, osm_key=None, name=None, country=None, city=None, state=None, street=None, housenumber=None, postcode=None):  # noqa: E501
        """GeocodingLocation - a model defined in Swagger"""  # noqa: E501

        self._point = None
        self._osm_id = None
        self._osm_type = None
        self._osm_key = None
        self._name = None
        self._country = None
        self._city = None
        self._state = None
        self._street = None
        self._housenumber = None
        self._postcode = None
        self.discriminator = None

        if point is not None:
            self.point = point
        if osm_id is not None:
            self.osm_id = osm_id
        if osm_type is not None:
            self.osm_type = osm_type
        if osm_key is not None:
            self.osm_key = osm_key
        if name is not None:
            self.name = name
        if country is not None:
            self.country = country
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if street is not None:
            self.street = street
        if housenumber is not None:
            self.housenumber = housenumber
        if postcode is not None:
            self.postcode = postcode

    @property
    def point(self):
        """Gets the point of this GeocodingLocation.  # noqa: E501


        :return: The point of this GeocodingLocation.  # noqa: E501
        :rtype: GeocodingPoint
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this GeocodingLocation.


        :param point: The point of this GeocodingLocation.  # noqa: E501
        :type: GeocodingPoint
        """

        self._point = point

    @property
    def osm_id(self):
        """Gets the osm_id of this GeocodingLocation.  # noqa: E501

        OSM Id  # noqa: E501

        :return: The osm_id of this GeocodingLocation.  # noqa: E501
        :rtype: str
        """
        return self._osm_id

    @osm_id.setter
    def osm_id(self, osm_id):
        """Sets the osm_id of this GeocodingLocation.

        OSM Id  # noqa: E501

        :param osm_id: The osm_id of this GeocodingLocation.  # noqa: E501
        :type: str
        """

        self._osm_id = osm_id

    @property
    def osm_type(self):
        """Gets the osm_type of this GeocodingLocation.  # noqa: E501

        N = node, R = relation, W = way  # noqa: E501

        :return: The osm_type of this GeocodingLocation.  # noqa: E501
        :rtype: str
        """
        return self._osm_type

    @osm_type.setter
    def osm_type(self, osm_type):
        """Sets the osm_type of this GeocodingLocation.

        N = node, R = relation, W = way  # noqa: E501

        :param osm_type: The osm_type of this GeocodingLocation.  # noqa: E501
        :type: str
        """

        self._osm_type = osm_type

    @property
    def osm_key(self):
        """Gets the osm_key of this GeocodingLocation.  # noqa: E501

        The osm key of the result like `place` or `amenity`  # noqa: E501

        :return: The osm_key of this GeocodingLocation.  # noqa: E501
        :rtype: str
        """
        return self._osm_key

    @osm_key.setter
    def osm_key(self, osm_key):
        """Sets the osm_key of this GeocodingLocation.

        The osm key of the result like `place` or `amenity`  # noqa: E501

        :param osm_key: The osm_key of this GeocodingLocation.  # noqa: E501
        :type: str
        """

        self._osm_key = osm_key

    @property
    def name(self):
        """Gets the name of this GeocodingLocation.  # noqa: E501


        :return: The name of this GeocodingLocation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GeocodingLocation.


        :param name: The name of this GeocodingLocation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def country(self):
        """Gets the country of this GeocodingLocation.  # noqa: E501


        :return: The country of this GeocodingLocation.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this GeocodingLocation.


        :param country: The country of this GeocodingLocation.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def city(self):
        """Gets the city of this GeocodingLocation.  # noqa: E501


        :return: The city of this GeocodingLocation.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this GeocodingLocation.


        :param city: The city of this GeocodingLocation.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this GeocodingLocation.  # noqa: E501


        :return: The state of this GeocodingLocation.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GeocodingLocation.


        :param state: The state of this GeocodingLocation.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def street(self):
        """Gets the street of this GeocodingLocation.  # noqa: E501


        :return: The street of this GeocodingLocation.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this GeocodingLocation.


        :param street: The street of this GeocodingLocation.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def housenumber(self):
        """Gets the housenumber of this GeocodingLocation.  # noqa: E501


        :return: The housenumber of this GeocodingLocation.  # noqa: E501
        :rtype: str
        """
        return self._housenumber

    @housenumber.setter
    def housenumber(self, housenumber):
        """Sets the housenumber of this GeocodingLocation.


        :param housenumber: The housenumber of this GeocodingLocation.  # noqa: E501
        :type: str
        """

        self._housenumber = housenumber

    @property
    def postcode(self):
        """Gets the postcode of this GeocodingLocation.  # noqa: E501


        :return: The postcode of this GeocodingLocation.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this GeocodingLocation.


        :param postcode: The postcode of this GeocodingLocation.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeocodingLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
