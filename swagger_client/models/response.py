# coding: utf-8

"""
    GraphHopper Directions API

    You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.solution import Solution  # noqa: F401,E501


class Response(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyrights': 'list[str]',
        'job_id': 'str',
        'status': 'str',
        'waiting_time_in_queue': 'int',
        'processing_time': 'int',
        'solution': 'Solution'
    }

    attribute_map = {
        'copyrights': 'copyrights',
        'job_id': 'job_id',
        'status': 'status',
        'waiting_time_in_queue': 'waiting_time_in_queue',
        'processing_time': 'processing_time',
        'solution': 'solution'
    }

    def __init__(self, copyrights=None, job_id=None, status=None, waiting_time_in_queue=None, processing_time=None, solution=None):  # noqa: E501
        """Response - a model defined in Swagger"""  # noqa: E501

        self._copyrights = None
        self._job_id = None
        self._status = None
        self._waiting_time_in_queue = None
        self._processing_time = None
        self._solution = None
        self.discriminator = None

        if copyrights is not None:
            self.copyrights = copyrights
        if job_id is not None:
            self.job_id = job_id
        if status is not None:
            self.status = status
        if waiting_time_in_queue is not None:
            self.waiting_time_in_queue = waiting_time_in_queue
        if processing_time is not None:
            self.processing_time = processing_time
        if solution is not None:
            self.solution = solution

    @property
    def copyrights(self):
        """Gets the copyrights of this Response.  # noqa: E501


        :return: The copyrights of this Response.  # noqa: E501
        :rtype: list[str]
        """
        return self._copyrights

    @copyrights.setter
    def copyrights(self, copyrights):
        """Sets the copyrights of this Response.


        :param copyrights: The copyrights of this Response.  # noqa: E501
        :type: list[str]
        """

        self._copyrights = copyrights

    @property
    def job_id(self):
        """Gets the job_id of this Response.  # noqa: E501

        unique identify of job - which you get when posting your request to the large problem solver  # noqa: E501

        :return: The job_id of this Response.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this Response.

        unique identify of job - which you get when posting your request to the large problem solver  # noqa: E501

        :param job_id: The job_id of this Response.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def status(self):
        """Gets the status of this Response.  # noqa: E501

        indicates the current status of the job  # noqa: E501

        :return: The status of this Response.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Response.

        indicates the current status of the job  # noqa: E501

        :param status: The status of this Response.  # noqa: E501
        :type: str
        """
        allowed_values = ["waiting_in_queue", "processing", "finished"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def waiting_time_in_queue(self):
        """Gets the waiting_time_in_queue of this Response.  # noqa: E501

        waiting time in ms  # noqa: E501

        :return: The waiting_time_in_queue of this Response.  # noqa: E501
        :rtype: int
        """
        return self._waiting_time_in_queue

    @waiting_time_in_queue.setter
    def waiting_time_in_queue(self, waiting_time_in_queue):
        """Sets the waiting_time_in_queue of this Response.

        waiting time in ms  # noqa: E501

        :param waiting_time_in_queue: The waiting_time_in_queue of this Response.  # noqa: E501
        :type: int
        """

        self._waiting_time_in_queue = waiting_time_in_queue

    @property
    def processing_time(self):
        """Gets the processing_time of this Response.  # noqa: E501

        processing time in ms. if job is still waiting in queue, processing_time is 0  # noqa: E501

        :return: The processing_time of this Response.  # noqa: E501
        :rtype: int
        """
        return self._processing_time

    @processing_time.setter
    def processing_time(self, processing_time):
        """Sets the processing_time of this Response.

        processing time in ms. if job is still waiting in queue, processing_time is 0  # noqa: E501

        :param processing_time: The processing_time of this Response.  # noqa: E501
        :type: int
        """

        self._processing_time = processing_time

    @property
    def solution(self):
        """Gets the solution of this Response.  # noqa: E501

        the solution. only available if status field indicates finished  # noqa: E501

        :return: The solution of this Response.  # noqa: E501
        :rtype: Solution
        """
        return self._solution

    @solution.setter
    def solution(self, solution):
        """Sets the solution of this Response.

        the solution. only available if status field indicates finished  # noqa: E501

        :param solution: The solution of this Response.  # noqa: E501
        :type: Solution
        """

        self._solution = solution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Response):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
