# coding: utf-8

"""
    GraphHopper Directions API

    You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.address import Address  # noqa: F401,E501
from swagger_client.models.model_break import ModelBreak  # noqa: F401,E501


class Vehicle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vehicle_id': 'str',
        'type_id': 'str',
        'start_address': 'Address',
        'end_address': 'Address',
        '_break': 'ModelBreak',
        'return_to_depot': 'bool',
        'earliest_start': 'int',
        'latest_end': 'int',
        'skills': 'list[str]',
        'max_distance': 'int',
        'max_driving_time': 'int',
        'max_jobs': 'int',
        'max_activities': 'int'
    }

    attribute_map = {
        'vehicle_id': 'vehicle_id',
        'type_id': 'type_id',
        'start_address': 'start_address',
        'end_address': 'end_address',
        '_break': 'break',
        'return_to_depot': 'return_to_depot',
        'earliest_start': 'earliest_start',
        'latest_end': 'latest_end',
        'skills': 'skills',
        'max_distance': 'max_distance',
        'max_driving_time': 'max_driving_time',
        'max_jobs': 'max_jobs',
        'max_activities': 'max_activities'
    }

    def __init__(self, vehicle_id=None, type_id=None, start_address=None, end_address=None, _break=None, return_to_depot=None, earliest_start=None, latest_end=None, skills=None, max_distance=None, max_driving_time=None, max_jobs=None, max_activities=None):  # noqa: E501
        """Vehicle - a model defined in Swagger"""  # noqa: E501

        self._vehicle_id = None
        self._type_id = None
        self._start_address = None
        self._end_address = None
        self.__break = None
        self._return_to_depot = None
        self._earliest_start = None
        self._latest_end = None
        self._skills = None
        self._max_distance = None
        self._max_driving_time = None
        self._max_jobs = None
        self._max_activities = None
        self.discriminator = None

        if vehicle_id is not None:
            self.vehicle_id = vehicle_id
        if type_id is not None:
            self.type_id = type_id
        if start_address is not None:
            self.start_address = start_address
        if end_address is not None:
            self.end_address = end_address
        if _break is not None:
            self._break = _break
        if return_to_depot is not None:
            self.return_to_depot = return_to_depot
        if earliest_start is not None:
            self.earliest_start = earliest_start
        if latest_end is not None:
            self.latest_end = latest_end
        if skills is not None:
            self.skills = skills
        if max_distance is not None:
            self.max_distance = max_distance
        if max_driving_time is not None:
            self.max_driving_time = max_driving_time
        if max_jobs is not None:
            self.max_jobs = max_jobs
        if max_activities is not None:
            self.max_activities = max_activities

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this Vehicle.  # noqa: E501

        Unique identifier of vehicle  # noqa: E501

        :return: The vehicle_id of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this Vehicle.

        Unique identifier of vehicle  # noqa: E501

        :param vehicle_id: The vehicle_id of this Vehicle.  # noqa: E501
        :type: str
        """

        self._vehicle_id = vehicle_id

    @property
    def type_id(self):
        """Gets the type_id of this Vehicle.  # noqa: E501

        Unique identifier referring to the available vehicle types  # noqa: E501

        :return: The type_id of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this Vehicle.

        Unique identifier referring to the available vehicle types  # noqa: E501

        :param type_id: The type_id of this Vehicle.  # noqa: E501
        :type: str
        """

        self._type_id = type_id

    @property
    def start_address(self):
        """Gets the start_address of this Vehicle.  # noqa: E501


        :return: The start_address of this Vehicle.  # noqa: E501
        :rtype: Address
        """
        return self._start_address

    @start_address.setter
    def start_address(self, start_address):
        """Sets the start_address of this Vehicle.


        :param start_address: The start_address of this Vehicle.  # noqa: E501
        :type: Address
        """

        self._start_address = start_address

    @property
    def end_address(self):
        """Gets the end_address of this Vehicle.  # noqa: E501


        :return: The end_address of this Vehicle.  # noqa: E501
        :rtype: Address
        """
        return self._end_address

    @end_address.setter
    def end_address(self, end_address):
        """Sets the end_address of this Vehicle.


        :param end_address: The end_address of this Vehicle.  # noqa: E501
        :type: Address
        """

        self._end_address = end_address

    @property
    def _break(self):
        """Gets the _break of this Vehicle.  # noqa: E501


        :return: The _break of this Vehicle.  # noqa: E501
        :rtype: ModelBreak
        """
        return self.__break

    @_break.setter
    def _break(self, _break):
        """Sets the _break of this Vehicle.


        :param _break: The _break of this Vehicle.  # noqa: E501
        :type: ModelBreak
        """

        self.__break = _break

    @property
    def return_to_depot(self):
        """Gets the return_to_depot of this Vehicle.  # noqa: E501

        Indicates whether vehicle should return to start address or not. If not, it can end at any service activity.  # noqa: E501

        :return: The return_to_depot of this Vehicle.  # noqa: E501
        :rtype: bool
        """
        return self._return_to_depot

    @return_to_depot.setter
    def return_to_depot(self, return_to_depot):
        """Sets the return_to_depot of this Vehicle.

        Indicates whether vehicle should return to start address or not. If not, it can end at any service activity.  # noqa: E501

        :param return_to_depot: The return_to_depot of this Vehicle.  # noqa: E501
        :type: bool
        """

        self._return_to_depot = return_to_depot

    @property
    def earliest_start(self):
        """Gets the earliest_start of this Vehicle.  # noqa: E501

        earliest start of vehicle at its start location  # noqa: E501

        :return: The earliest_start of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._earliest_start

    @earliest_start.setter
    def earliest_start(self, earliest_start):
        """Sets the earliest_start of this Vehicle.

        earliest start of vehicle at its start location  # noqa: E501

        :param earliest_start: The earliest_start of this Vehicle.  # noqa: E501
        :type: int
        """

        self._earliest_start = earliest_start

    @property
    def latest_end(self):
        """Gets the latest_end of this Vehicle.  # noqa: E501

        latest end of vehicle at its end location  # noqa: E501

        :return: The latest_end of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._latest_end

    @latest_end.setter
    def latest_end(self, latest_end):
        """Sets the latest_end of this Vehicle.

        latest end of vehicle at its end location  # noqa: E501

        :param latest_end: The latest_end of this Vehicle.  # noqa: E501
        :type: int
        """

        self._latest_end = latest_end

    @property
    def skills(self):
        """Gets the skills of this Vehicle.  # noqa: E501

        array of skills  # noqa: E501

        :return: The skills of this Vehicle.  # noqa: E501
        :rtype: list[str]
        """
        return self._skills

    @skills.setter
    def skills(self, skills):
        """Sets the skills of this Vehicle.

        array of skills  # noqa: E501

        :param skills: The skills of this Vehicle.  # noqa: E501
        :type: list[str]
        """

        self._skills = skills

    @property
    def max_distance(self):
        """Gets the max_distance of this Vehicle.  # noqa: E501

        max distance of vehicle  # noqa: E501

        :return: The max_distance of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._max_distance

    @max_distance.setter
    def max_distance(self, max_distance):
        """Sets the max_distance of this Vehicle.

        max distance of vehicle  # noqa: E501

        :param max_distance: The max_distance of this Vehicle.  # noqa: E501
        :type: int
        """

        self._max_distance = max_distance

    @property
    def max_driving_time(self):
        """Gets the max_driving_time of this Vehicle.  # noqa: E501

        max drive time of vehicle  # noqa: E501

        :return: The max_driving_time of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._max_driving_time

    @max_driving_time.setter
    def max_driving_time(self, max_driving_time):
        """Sets the max_driving_time of this Vehicle.

        max drive time of vehicle  # noqa: E501

        :param max_driving_time: The max_driving_time of this Vehicle.  # noqa: E501
        :type: int
        """

        self._max_driving_time = max_driving_time

    @property
    def max_jobs(self):
        """Gets the max_jobs of this Vehicle.  # noqa: E501

        max number of jobs the vehicle can load  # noqa: E501

        :return: The max_jobs of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._max_jobs

    @max_jobs.setter
    def max_jobs(self, max_jobs):
        """Sets the max_jobs of this Vehicle.

        max number of jobs the vehicle can load  # noqa: E501

        :param max_jobs: The max_jobs of this Vehicle.  # noqa: E501
        :type: int
        """

        self._max_jobs = max_jobs

    @property
    def max_activities(self):
        """Gets the max_activities of this Vehicle.  # noqa: E501

        max number of activities the vehicle can conduct  # noqa: E501

        :return: The max_activities of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._max_activities

    @max_activities.setter
    def max_activities(self, max_activities):
        """Sets the max_activities of this Vehicle.

        max number of activities the vehicle can conduct  # noqa: E501

        :param max_activities: The max_activities of this Vehicle.  # noqa: E501
        :type: int
        """

        self._max_activities = max_activities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vehicle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
