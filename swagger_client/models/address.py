# coding: utf-8

"""
    GraphHopper Directions API

    You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location_id': 'str',
        'name': 'str',
        'lon': 'float',
        'lat': 'float',
        'street_hint': 'str'
    }

    attribute_map = {
        'location_id': 'location_id',
        'name': 'name',
        'lon': 'lon',
        'lat': 'lat',
        'street_hint': 'street_hint'
    }

    def __init__(self, location_id=None, name=None, lon=None, lat=None, street_hint=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501

        self._location_id = None
        self._name = None
        self._lon = None
        self._lat = None
        self._street_hint = None
        self.discriminator = None

        if location_id is not None:
            self.location_id = location_id
        if name is not None:
            self.name = name
        if lon is not None:
            self.lon = lon
        if lat is not None:
            self.lat = lat
        if street_hint is not None:
            self.street_hint = street_hint

    @property
    def location_id(self):
        """Gets the location_id of this Address.  # noqa: E501

        Unique identifier of location  # noqa: E501

        :return: The location_id of this Address.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Address.

        Unique identifier of location  # noqa: E501

        :param location_id: The location_id of this Address.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    @property
    def name(self):
        """Gets the name of this Address.  # noqa: E501

        name of location, e.g. street name plus house number  # noqa: E501

        :return: The name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Address.

        name of location, e.g. street name plus house number  # noqa: E501

        :param name: The name of this Address.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def lon(self):
        """Gets the lon of this Address.  # noqa: E501

        longitude  # noqa: E501

        :return: The lon of this Address.  # noqa: E501
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this Address.

        longitude  # noqa: E501

        :param lon: The lon of this Address.  # noqa: E501
        :type: float
        """

        self._lon = lon

    @property
    def lat(self):
        """Gets the lat of this Address.  # noqa: E501

        latitude  # noqa: E501

        :return: The lat of this Address.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Address.

        latitude  # noqa: E501

        :param lat: The lat of this Address.  # noqa: E501
        :type: float
        """

        self._lat = lat

    @property
    def street_hint(self):
        """Gets the street_hint of this Address.  # noqa: E501

        Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.  # noqa: E501

        :return: The street_hint of this Address.  # noqa: E501
        :rtype: str
        """
        return self._street_hint

    @street_hint.setter
    def street_hint(self, street_hint):
        """Sets the street_hint of this Address.

        Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.  # noqa: E501

        :param street_hint: The street_hint of this Address.  # noqa: E501
        :type: str
        """

        self._street_hint = street_hint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
