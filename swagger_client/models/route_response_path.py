# coding: utf-8

"""
    GraphHopper Directions API

    You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.response_coordinates import ResponseCoordinates  # noqa: F401,E501
from swagger_client.models.response_instructions import ResponseInstructions  # noqa: F401,E501


class RouteResponsePath(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'distance': 'float',
        'time': 'int',
        'ascend': 'float',
        'descend': 'float',
        'points': 'ResponseCoordinates',
        'points_encoded': 'bool',
        'bbox': 'list[float]',
        'snapped_waypoints': 'ResponseCoordinates',
        'instructions': 'ResponseInstructions',
        'details': 'object'
    }

    attribute_map = {
        'distance': 'distance',
        'time': 'time',
        'ascend': 'ascend',
        'descend': 'descend',
        'points': 'points',
        'points_encoded': 'points_encoded',
        'bbox': 'bbox',
        'snapped_waypoints': 'snapped_waypoints',
        'instructions': 'instructions',
        'details': 'details'
    }

    def __init__(self, distance=None, time=None, ascend=None, descend=None, points=None, points_encoded=None, bbox=None, snapped_waypoints=None, instructions=None, details=None):  # noqa: E501
        """RouteResponsePath - a model defined in Swagger"""  # noqa: E501

        self._distance = None
        self._time = None
        self._ascend = None
        self._descend = None
        self._points = None
        self._points_encoded = None
        self._bbox = None
        self._snapped_waypoints = None
        self._instructions = None
        self._details = None
        self.discriminator = None

        if distance is not None:
            self.distance = distance
        if time is not None:
            self.time = time
        if ascend is not None:
            self.ascend = ascend
        if descend is not None:
            self.descend = descend
        if points is not None:
            self.points = points
        if points_encoded is not None:
            self.points_encoded = points_encoded
        if bbox is not None:
            self.bbox = bbox
        if snapped_waypoints is not None:
            self.snapped_waypoints = snapped_waypoints
        if instructions is not None:
            self.instructions = instructions
        if details is not None:
            self.details = details

    @property
    def distance(self):
        """Gets the distance of this RouteResponsePath.  # noqa: E501

        The total distance of the route, in meter  # noqa: E501

        :return: The distance of this RouteResponsePath.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this RouteResponsePath.

        The total distance of the route, in meter  # noqa: E501

        :param distance: The distance of this RouteResponsePath.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def time(self):
        """Gets the time of this RouteResponsePath.  # noqa: E501

        The total time of the route, in ms  # noqa: E501

        :return: The time of this RouteResponsePath.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this RouteResponsePath.

        The total time of the route, in ms  # noqa: E501

        :param time: The time of this RouteResponsePath.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def ascend(self):
        """Gets the ascend of this RouteResponsePath.  # noqa: E501


        :return: The ascend of this RouteResponsePath.  # noqa: E501
        :rtype: float
        """
        return self._ascend

    @ascend.setter
    def ascend(self, ascend):
        """Sets the ascend of this RouteResponsePath.


        :param ascend: The ascend of this RouteResponsePath.  # noqa: E501
        :type: float
        """

        self._ascend = ascend

    @property
    def descend(self):
        """Gets the descend of this RouteResponsePath.  # noqa: E501

        The total descend (downhill) of the route, in meter  # noqa: E501

        :return: The descend of this RouteResponsePath.  # noqa: E501
        :rtype: float
        """
        return self._descend

    @descend.setter
    def descend(self, descend):
        """Sets the descend of this RouteResponsePath.

        The total descend (downhill) of the route, in meter  # noqa: E501

        :param descend: The descend of this RouteResponsePath.  # noqa: E501
        :type: float
        """

        self._descend = descend

    @property
    def points(self):
        """Gets the points of this RouteResponsePath.  # noqa: E501


        :return: The points of this RouteResponsePath.  # noqa: E501
        :rtype: ResponseCoordinates
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this RouteResponsePath.


        :param points: The points of this RouteResponsePath.  # noqa: E501
        :type: ResponseCoordinates
        """

        self._points = points

    @property
    def points_encoded(self):
        """Gets the points_encoded of this RouteResponsePath.  # noqa: E501

        Is true if the points are encoded, if not paths[0].points contains the geo json of the path (then order is lon,lat,elevation), which is easier to handle but consumes more bandwidth compared to encoded version  # noqa: E501

        :return: The points_encoded of this RouteResponsePath.  # noqa: E501
        :rtype: bool
        """
        return self._points_encoded

    @points_encoded.setter
    def points_encoded(self, points_encoded):
        """Sets the points_encoded of this RouteResponsePath.

        Is true if the points are encoded, if not paths[0].points contains the geo json of the path (then order is lon,lat,elevation), which is easier to handle but consumes more bandwidth compared to encoded version  # noqa: E501

        :param points_encoded: The points_encoded of this RouteResponsePath.  # noqa: E501
        :type: bool
        """

        self._points_encoded = points_encoded

    @property
    def bbox(self):
        """Gets the bbox of this RouteResponsePath.  # noqa: E501

        The bounding box of the route, format <br> minLon, minLat, maxLon, maxLat  # noqa: E501

        :return: The bbox of this RouteResponsePath.  # noqa: E501
        :rtype: list[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this RouteResponsePath.

        The bounding box of the route, format <br> minLon, minLat, maxLon, maxLat  # noqa: E501

        :param bbox: The bbox of this RouteResponsePath.  # noqa: E501
        :type: list[float]
        """

        self._bbox = bbox

    @property
    def snapped_waypoints(self):
        """Gets the snapped_waypoints of this RouteResponsePath.  # noqa: E501


        :return: The snapped_waypoints of this RouteResponsePath.  # noqa: E501
        :rtype: ResponseCoordinates
        """
        return self._snapped_waypoints

    @snapped_waypoints.setter
    def snapped_waypoints(self, snapped_waypoints):
        """Sets the snapped_waypoints of this RouteResponsePath.


        :param snapped_waypoints: The snapped_waypoints of this RouteResponsePath.  # noqa: E501
        :type: ResponseCoordinates
        """

        self._snapped_waypoints = snapped_waypoints

    @property
    def instructions(self):
        """Gets the instructions of this RouteResponsePath.  # noqa: E501


        :return: The instructions of this RouteResponsePath.  # noqa: E501
        :rtype: ResponseInstructions
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this RouteResponsePath.


        :param instructions: The instructions of this RouteResponsePath.  # noqa: E501
        :type: ResponseInstructions
        """

        self._instructions = instructions

    @property
    def details(self):
        """Gets the details of this RouteResponsePath.  # noqa: E501


        :return: The details of this RouteResponsePath.  # noqa: E501
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this RouteResponsePath.


        :param details: The details of this RouteResponsePath.  # noqa: E501
        :type: object
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RouteResponsePath):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
