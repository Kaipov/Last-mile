# coding: utf-8

"""
    GraphHopper Directions API

    You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.detail import Detail  # noqa: F401,E501


class SolutionUnassigned(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'services': 'list[str]',
        'shipments': 'list[str]',
        'breaks': 'list[str]',
        'details': 'list[Detail]'
    }

    attribute_map = {
        'services': 'services',
        'shipments': 'shipments',
        'breaks': 'breaks',
        'details': 'details'
    }

    def __init__(self, services=None, shipments=None, breaks=None, details=None):  # noqa: E501
        """SolutionUnassigned - a model defined in Swagger"""  # noqa: E501

        self._services = None
        self._shipments = None
        self._breaks = None
        self._details = None
        self.discriminator = None

        if services is not None:
            self.services = services
        if shipments is not None:
            self.shipments = shipments
        if breaks is not None:
            self.breaks = breaks
        if details is not None:
            self.details = details

    @property
    def services(self):
        """Gets the services of this SolutionUnassigned.  # noqa: E501

        An array of ids of unassigned services  # noqa: E501

        :return: The services of this SolutionUnassigned.  # noqa: E501
        :rtype: list[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this SolutionUnassigned.

        An array of ids of unassigned services  # noqa: E501

        :param services: The services of this SolutionUnassigned.  # noqa: E501
        :type: list[str]
        """

        self._services = services

    @property
    def shipments(self):
        """Gets the shipments of this SolutionUnassigned.  # noqa: E501

        An array of ids of unassigned shipments  # noqa: E501

        :return: The shipments of this SolutionUnassigned.  # noqa: E501
        :rtype: list[str]
        """
        return self._shipments

    @shipments.setter
    def shipments(self, shipments):
        """Sets the shipments of this SolutionUnassigned.

        An array of ids of unassigned shipments  # noqa: E501

        :param shipments: The shipments of this SolutionUnassigned.  # noqa: E501
        :type: list[str]
        """

        self._shipments = shipments

    @property
    def breaks(self):
        """Gets the breaks of this SolutionUnassigned.  # noqa: E501

        An array of ids of unassigned breaks  # noqa: E501

        :return: The breaks of this SolutionUnassigned.  # noqa: E501
        :rtype: list[str]
        """
        return self._breaks

    @breaks.setter
    def breaks(self, breaks):
        """Sets the breaks of this SolutionUnassigned.

        An array of ids of unassigned breaks  # noqa: E501

        :param breaks: The breaks of this SolutionUnassigned.  # noqa: E501
        :type: list[str]
        """

        self._breaks = breaks

    @property
    def details(self):
        """Gets the details of this SolutionUnassigned.  # noqa: E501

        An array of details, i.e. reason for unassigned services or shipments  # noqa: E501

        :return: The details of this SolutionUnassigned.  # noqa: E501
        :rtype: list[Detail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this SolutionUnassigned.

        An array of details, i.e. reason for unassigned services or shipments  # noqa: E501

        :param details: The details of this SolutionUnassigned.  # noqa: E501
        :type: list[Detail]
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SolutionUnassigned):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
