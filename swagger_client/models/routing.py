# coding: utf-8

"""
    GraphHopper Directions API

    You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Routing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'calc_points': 'bool',
        'consider_traffic': 'bool',
        'network_data_provider': 'str',
        'fail_fast': 'bool'
    }

    attribute_map = {
        'calc_points': 'calc_points',
        'consider_traffic': 'consider_traffic',
        'network_data_provider': 'network_data_provider',
        'fail_fast': 'fail_fast'
    }

    def __init__(self, calc_points=None, consider_traffic=None, network_data_provider=None, fail_fast=None):  # noqa: E501
        """Routing - a model defined in Swagger"""  # noqa: E501

        self._calc_points = None
        self._consider_traffic = None
        self._network_data_provider = None
        self._fail_fast = None
        self.discriminator = None

        if calc_points is not None:
            self.calc_points = calc_points
        if consider_traffic is not None:
            self.consider_traffic = consider_traffic
        if network_data_provider is not None:
            self.network_data_provider = network_data_provider
        if fail_fast is not None:
            self.fail_fast = fail_fast

    @property
    def calc_points(self):
        """Gets the calc_points of this Routing.  # noqa: E501

        indicates whether solution should come with route geometries  # noqa: E501

        :return: The calc_points of this Routing.  # noqa: E501
        :rtype: bool
        """
        return self._calc_points

    @calc_points.setter
    def calc_points(self, calc_points):
        """Sets the calc_points of this Routing.

        indicates whether solution should come with route geometries  # noqa: E501

        :param calc_points: The calc_points of this Routing.  # noqa: E501
        :type: bool
        """

        self._calc_points = calc_points

    @property
    def consider_traffic(self):
        """Gets the consider_traffic of this Routing.  # noqa: E501

        indicates whether historical traffic information should be considered  # noqa: E501

        :return: The consider_traffic of this Routing.  # noqa: E501
        :rtype: bool
        """
        return self._consider_traffic

    @consider_traffic.setter
    def consider_traffic(self, consider_traffic):
        """Sets the consider_traffic of this Routing.

        indicates whether historical traffic information should be considered  # noqa: E501

        :param consider_traffic: The consider_traffic of this Routing.  # noqa: E501
        :type: bool
        """

        self._consider_traffic = consider_traffic

    @property
    def network_data_provider(self):
        """Gets the network_data_provider of this Routing.  # noqa: E501

        specifies the data provider  # noqa: E501

        :return: The network_data_provider of this Routing.  # noqa: E501
        :rtype: str
        """
        return self._network_data_provider

    @network_data_provider.setter
    def network_data_provider(self, network_data_provider):
        """Sets the network_data_provider of this Routing.

        specifies the data provider  # noqa: E501

        :param network_data_provider: The network_data_provider of this Routing.  # noqa: E501
        :type: str
        """
        allowed_values = ["openstreetmap", "tomtom"]  # noqa: E501
        if network_data_provider not in allowed_values:
            raise ValueError(
                "Invalid value for `network_data_provider` ({0}), must be one of {1}"  # noqa: E501
                .format(network_data_provider, allowed_values)
            )

        self._network_data_provider = network_data_provider

    @property
    def fail_fast(self):
        """Gets the fail_fast of this Routing.  # noqa: E501

        indicates whether matrix calculation should fail fast when points cannot be connected  # noqa: E501

        :return: The fail_fast of this Routing.  # noqa: E501
        :rtype: bool
        """
        return self._fail_fast

    @fail_fast.setter
    def fail_fast(self, fail_fast):
        """Sets the fail_fast of this Routing.

        indicates whether matrix calculation should fail fast when points cannot be connected  # noqa: E501

        :param fail_fast: The fail_fast of this Routing.  # noqa: E501
        :type: bool
        """

        self._fail_fast = fail_fast

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Routing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
