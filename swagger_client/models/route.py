# coding: utf-8

"""
    GraphHopper Directions API

    You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.activity import Activity  # noqa: F401,E501
from swagger_client.models.route_point import RoutePoint  # noqa: F401,E501


class Route(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vehicle_id': 'str',
        'distance': 'int',
        'transport_time': 'int',
        'completion_time': 'int',
        'waiting_time': 'int',
        'service_duration': 'int',
        'preparation_time': 'int',
        'activities': 'list[Activity]',
        'points': 'list[RoutePoint]'
    }

    attribute_map = {
        'vehicle_id': 'vehicle_id',
        'distance': 'distance',
        'transport_time': 'transport_time',
        'completion_time': 'completion_time',
        'waiting_time': 'waiting_time',
        'service_duration': 'service_duration',
        'preparation_time': 'preparation_time',
        'activities': 'activities',
        'points': 'points'
    }

    def __init__(self, vehicle_id=None, distance=None, transport_time=None, completion_time=None, waiting_time=None, service_duration=None, preparation_time=None, activities=None, points=None):  # noqa: E501
        """Route - a model defined in Swagger"""  # noqa: E501

        self._vehicle_id = None
        self._distance = None
        self._transport_time = None
        self._completion_time = None
        self._waiting_time = None
        self._service_duration = None
        self._preparation_time = None
        self._activities = None
        self._points = None
        self.discriminator = None

        if vehicle_id is not None:
            self.vehicle_id = vehicle_id
        if distance is not None:
            self.distance = distance
        if transport_time is not None:
            self.transport_time = transport_time
        if completion_time is not None:
            self.completion_time = completion_time
        if waiting_time is not None:
            self.waiting_time = waiting_time
        if service_duration is not None:
            self.service_duration = service_duration
        if preparation_time is not None:
            self.preparation_time = preparation_time
        if activities is not None:
            self.activities = activities
        if points is not None:
            self.points = points

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this Route.  # noqa: E501

        id of vehicle that operates route  # noqa: E501

        :return: The vehicle_id of this Route.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this Route.

        id of vehicle that operates route  # noqa: E501

        :param vehicle_id: The vehicle_id of this Route.  # noqa: E501
        :type: str
        """

        self._vehicle_id = vehicle_id

    @property
    def distance(self):
        """Gets the distance of this Route.  # noqa: E501

        distance of route in meter  # noqa: E501

        :return: The distance of this Route.  # noqa: E501
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Route.

        distance of route in meter  # noqa: E501

        :param distance: The distance of this Route.  # noqa: E501
        :type: int
        """

        self._distance = distance

    @property
    def transport_time(self):
        """Gets the transport_time of this Route.  # noqa: E501

        transport time of route in seconds  # noqa: E501

        :return: The transport_time of this Route.  # noqa: E501
        :rtype: int
        """
        return self._transport_time

    @transport_time.setter
    def transport_time(self, transport_time):
        """Sets the transport_time of this Route.

        transport time of route in seconds  # noqa: E501

        :param transport_time: The transport_time of this Route.  # noqa: E501
        :type: int
        """

        self._transport_time = transport_time

    @property
    def completion_time(self):
        """Gets the completion_time of this Route.  # noqa: E501

        completion time of route in seconds  # noqa: E501

        :return: The completion_time of this Route.  # noqa: E501
        :rtype: int
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this Route.

        completion time of route in seconds  # noqa: E501

        :param completion_time: The completion_time of this Route.  # noqa: E501
        :type: int
        """

        self._completion_time = completion_time

    @property
    def waiting_time(self):
        """Gets the waiting_time of this Route.  # noqa: E501

        waiting time of route in seconds  # noqa: E501

        :return: The waiting_time of this Route.  # noqa: E501
        :rtype: int
        """
        return self._waiting_time

    @waiting_time.setter
    def waiting_time(self, waiting_time):
        """Sets the waiting_time of this Route.

        waiting time of route in seconds  # noqa: E501

        :param waiting_time: The waiting_time of this Route.  # noqa: E501
        :type: int
        """

        self._waiting_time = waiting_time

    @property
    def service_duration(self):
        """Gets the service_duration of this Route.  # noqa: E501

        service duration of route in seconds  # noqa: E501

        :return: The service_duration of this Route.  # noqa: E501
        :rtype: int
        """
        return self._service_duration

    @service_duration.setter
    def service_duration(self, service_duration):
        """Sets the service_duration of this Route.

        service duration of route in seconds  # noqa: E501

        :param service_duration: The service_duration of this Route.  # noqa: E501
        :type: int
        """

        self._service_duration = service_duration

    @property
    def preparation_time(self):
        """Gets the preparation_time of this Route.  # noqa: E501

        preparation time of route in seconds  # noqa: E501

        :return: The preparation_time of this Route.  # noqa: E501
        :rtype: int
        """
        return self._preparation_time

    @preparation_time.setter
    def preparation_time(self, preparation_time):
        """Sets the preparation_time of this Route.

        preparation time of route in seconds  # noqa: E501

        :param preparation_time: The preparation_time of this Route.  # noqa: E501
        :type: int
        """

        self._preparation_time = preparation_time

    @property
    def activities(self):
        """Gets the activities of this Route.  # noqa: E501

        array of activities  # noqa: E501

        :return: The activities of this Route.  # noqa: E501
        :rtype: list[Activity]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this Route.

        array of activities  # noqa: E501

        :param activities: The activities of this Route.  # noqa: E501
        :type: list[Activity]
        """

        self._activities = activities

    @property
    def points(self):
        """Gets the points of this Route.  # noqa: E501

        array of route planning points  # noqa: E501

        :return: The points of this Route.  # noqa: E501
        :rtype: list[RoutePoint]
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this Route.

        array of route planning points  # noqa: E501

        :param points: The points of this Route.  # noqa: E501
        :type: list[RoutePoint]
        """

        self._points = points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Route):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
