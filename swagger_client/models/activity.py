# coding: utf-8

"""
    GraphHopper Directions API

    You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.address import Address  # noqa: F401,E501


class Activity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'location_id': 'str',
        'address': 'Address',
        'arr_time': 'int',
        'end_time': 'int',
        'end_date_time': 'str',
        'arr_date_time': 'str',
        'waiting_time': 'int',
        'preparation_time': 'int',
        'distance': 'int',
        'driving_time': 'int',
        'load_before': 'list[int]',
        'load_after': 'list[int]'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'location_id': 'location_id',
        'address': 'address',
        'arr_time': 'arr_time',
        'end_time': 'end_time',
        'end_date_time': 'end_date_time',
        'arr_date_time': 'arr_date_time',
        'waiting_time': 'waiting_time',
        'preparation_time': 'preparation_time',
        'distance': 'distance',
        'driving_time': 'driving_time',
        'load_before': 'load_before',
        'load_after': 'load_after'
    }

    def __init__(self, type=None, id=None, location_id=None, address=None, arr_time=None, end_time=None, end_date_time=None, arr_date_time=None, waiting_time=None, preparation_time=None, distance=None, driving_time=None, load_before=None, load_after=None):  # noqa: E501
        """Activity - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._id = None
        self._location_id = None
        self._address = None
        self._arr_time = None
        self._end_time = None
        self._end_date_time = None
        self._arr_date_time = None
        self._waiting_time = None
        self._preparation_time = None
        self._distance = None
        self._driving_time = None
        self._load_before = None
        self._load_after = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if location_id is not None:
            self.location_id = location_id
        if address is not None:
            self.address = address
        if arr_time is not None:
            self.arr_time = arr_time
        if end_time is not None:
            self.end_time = end_time
        if end_date_time is not None:
            self.end_date_time = end_date_time
        if arr_date_time is not None:
            self.arr_date_time = arr_date_time
        if waiting_time is not None:
            self.waiting_time = waiting_time
        if preparation_time is not None:
            self.preparation_time = preparation_time
        if distance is not None:
            self.distance = distance
        if driving_time is not None:
            self.driving_time = driving_time
        if load_before is not None:
            self.load_before = load_before
        if load_after is not None:
            self.load_after = load_after

    @property
    def type(self):
        """Gets the type of this Activity.  # noqa: E501

        type of activity  # noqa: E501

        :return: The type of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Activity.

        type of activity  # noqa: E501

        :param type: The type of this Activity.  # noqa: E501
        :type: str
        """
        allowed_values = ["start", "end", "service", "pickupShipment", "deliverShipment", "pickup", "delivery", "break"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this Activity.  # noqa: E501

        id referring to the underlying service or shipment, i.e. the shipment or service this activity belongs to  # noqa: E501

        :return: The id of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Activity.

        id referring to the underlying service or shipment, i.e. the shipment or service this activity belongs to  # noqa: E501

        :param id: The id of this Activity.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this Activity.  # noqa: E501

        id that refers to address  # noqa: E501

        :return: The location_id of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Activity.

        id that refers to address  # noqa: E501

        :param location_id: The location_id of this Activity.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    @property
    def address(self):
        """Gets the address of this Activity.  # noqa: E501

        address of activity  # noqa: E501

        :return: The address of this Activity.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Activity.

        address of activity  # noqa: E501

        :param address: The address of this Activity.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def arr_time(self):
        """Gets the arr_time of this Activity.  # noqa: E501

        arrival time at this activity in seconds  # noqa: E501

        :return: The arr_time of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._arr_time

    @arr_time.setter
    def arr_time(self, arr_time):
        """Sets the arr_time of this Activity.

        arrival time at this activity in seconds  # noqa: E501

        :param arr_time: The arr_time of this Activity.  # noqa: E501
        :type: int
        """

        self._arr_time = arr_time

    @property
    def end_time(self):
        """Gets the end_time of this Activity.  # noqa: E501

        end time of and thus departure time at this activity  # noqa: E501

        :return: The end_time of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Activity.

        end time of and thus departure time at this activity  # noqa: E501

        :param end_time: The end_time of this Activity.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this Activity.  # noqa: E501

        end date time with offset like this 1970-01-01T01:00+01:00  # noqa: E501

        :return: The end_date_time of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this Activity.

        end date time with offset like this 1970-01-01T01:00+01:00  # noqa: E501

        :param end_date_time: The end_date_time of this Activity.  # noqa: E501
        :type: str
        """

        self._end_date_time = end_date_time

    @property
    def arr_date_time(self):
        """Gets the arr_date_time of this Activity.  # noqa: E501

        arrival date time with offset like this 1970-01-01T01:00+01:00  # noqa: E501

        :return: The arr_date_time of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._arr_date_time

    @arr_date_time.setter
    def arr_date_time(self, arr_date_time):
        """Sets the arr_date_time of this Activity.

        arrival date time with offset like this 1970-01-01T01:00+01:00  # noqa: E501

        :param arr_date_time: The arr_date_time of this Activity.  # noqa: E501
        :type: str
        """

        self._arr_date_time = arr_date_time

    @property
    def waiting_time(self):
        """Gets the waiting_time of this Activity.  # noqa: E501

        waiting time at this activity in seconds  # noqa: E501

        :return: The waiting_time of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._waiting_time

    @waiting_time.setter
    def waiting_time(self, waiting_time):
        """Sets the waiting_time of this Activity.

        waiting time at this activity in seconds  # noqa: E501

        :param waiting_time: The waiting_time of this Activity.  # noqa: E501
        :type: int
        """

        self._waiting_time = waiting_time

    @property
    def preparation_time(self):
        """Gets the preparation_time of this Activity.  # noqa: E501

        preparation time at this activity in seconds  # noqa: E501

        :return: The preparation_time of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._preparation_time

    @preparation_time.setter
    def preparation_time(self, preparation_time):
        """Sets the preparation_time of this Activity.

        preparation time at this activity in seconds  # noqa: E501

        :param preparation_time: The preparation_time of this Activity.  # noqa: E501
        :type: int
        """

        self._preparation_time = preparation_time

    @property
    def distance(self):
        """Gets the distance of this Activity.  # noqa: E501

        cumulated distance from start to this activity in m  # noqa: E501

        :return: The distance of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Activity.

        cumulated distance from start to this activity in m  # noqa: E501

        :param distance: The distance of this Activity.  # noqa: E501
        :type: int
        """

        self._distance = distance

    @property
    def driving_time(self):
        """Gets the driving_time of this Activity.  # noqa: E501

        driving time of driver in seconds  # noqa: E501

        :return: The driving_time of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._driving_time

    @driving_time.setter
    def driving_time(self, driving_time):
        """Sets the driving_time of this Activity.

        driving time of driver in seconds  # noqa: E501

        :param driving_time: The driving_time of this Activity.  # noqa: E501
        :type: int
        """

        self._driving_time = driving_time

    @property
    def load_before(self):
        """Gets the load_before of this Activity.  # noqa: E501

        Array with size/capacity dimensions before this activity  # noqa: E501

        :return: The load_before of this Activity.  # noqa: E501
        :rtype: list[int]
        """
        return self._load_before

    @load_before.setter
    def load_before(self, load_before):
        """Sets the load_before of this Activity.

        Array with size/capacity dimensions before this activity  # noqa: E501

        :param load_before: The load_before of this Activity.  # noqa: E501
        :type: list[int]
        """

        self._load_before = load_before

    @property
    def load_after(self):
        """Gets the load_after of this Activity.  # noqa: E501

        Array with size/capacity dimensions after this activity  # noqa: E501

        :return: The load_after of this Activity.  # noqa: E501
        :rtype: list[int]
        """
        return self._load_after

    @load_after.setter
    def load_after(self, load_after):
        """Sets the load_after of this Activity.

        Array with size/capacity dimensions after this activity  # noqa: E501

        :param load_after: The load_after of this Activity.  # noqa: E501
        :type: list[int]
        """

        self._load_after = load_after

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Activity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
