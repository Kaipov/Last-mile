# coding: utf-8

"""
    GraphHopper Directions API

    You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.stop import Stop  # noqa: F401,E501


class Shipment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'priority': 'int',
        'pickup': 'Stop',
        'delivery': 'Stop',
        'size': 'list[int]',
        'required_skills': 'list[str]',
        'allowed_vehicles': 'list[str]',
        'disallowed_vehicles': 'list[str]',
        'max_time_in_vehicle': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'priority': 'priority',
        'pickup': 'pickup',
        'delivery': 'delivery',
        'size': 'size',
        'required_skills': 'required_skills',
        'allowed_vehicles': 'allowed_vehicles',
        'disallowed_vehicles': 'disallowed_vehicles',
        'max_time_in_vehicle': 'max_time_in_vehicle'
    }

    def __init__(self, id=None, name=None, priority=None, pickup=None, delivery=None, size=None, required_skills=None, allowed_vehicles=None, disallowed_vehicles=None, max_time_in_vehicle=None):  # noqa: E501
        """Shipment - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._priority = None
        self._pickup = None
        self._delivery = None
        self._size = None
        self._required_skills = None
        self._allowed_vehicles = None
        self._disallowed_vehicles = None
        self._max_time_in_vehicle = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if priority is not None:
            self.priority = priority
        if pickup is not None:
            self.pickup = pickup
        if delivery is not None:
            self.delivery = delivery
        if size is not None:
            self.size = size
        if required_skills is not None:
            self.required_skills = required_skills
        if allowed_vehicles is not None:
            self.allowed_vehicles = allowed_vehicles
        if disallowed_vehicles is not None:
            self.disallowed_vehicles = disallowed_vehicles
        if max_time_in_vehicle is not None:
            self.max_time_in_vehicle = max_time_in_vehicle

    @property
    def id(self):
        """Gets the id of this Shipment.  # noqa: E501

        Unique identifier of service  # noqa: E501

        :return: The id of this Shipment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Shipment.

        Unique identifier of service  # noqa: E501

        :param id: The id of this Shipment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Shipment.  # noqa: E501

        name of shipment  # noqa: E501

        :return: The name of this Shipment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Shipment.

        name of shipment  # noqa: E501

        :param name: The name of this Shipment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this Shipment.  # noqa: E501

        priority of service, i.e. 1 = high, 2 = normal, 3 = low. default is 2.  # noqa: E501

        :return: The priority of this Shipment.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Shipment.

        priority of service, i.e. 1 = high, 2 = normal, 3 = low. default is 2.  # noqa: E501

        :param priority: The priority of this Shipment.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def pickup(self):
        """Gets the pickup of this Shipment.  # noqa: E501


        :return: The pickup of this Shipment.  # noqa: E501
        :rtype: Stop
        """
        return self._pickup

    @pickup.setter
    def pickup(self, pickup):
        """Sets the pickup of this Shipment.


        :param pickup: The pickup of this Shipment.  # noqa: E501
        :type: Stop
        """

        self._pickup = pickup

    @property
    def delivery(self):
        """Gets the delivery of this Shipment.  # noqa: E501


        :return: The delivery of this Shipment.  # noqa: E501
        :rtype: Stop
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this Shipment.


        :param delivery: The delivery of this Shipment.  # noqa: E501
        :type: Stop
        """

        self._delivery = delivery

    @property
    def size(self):
        """Gets the size of this Shipment.  # noqa: E501

        array of capacity dimensions  # noqa: E501

        :return: The size of this Shipment.  # noqa: E501
        :rtype: list[int]
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Shipment.

        array of capacity dimensions  # noqa: E501

        :param size: The size of this Shipment.  # noqa: E501
        :type: list[int]
        """

        self._size = size

    @property
    def required_skills(self):
        """Gets the required_skills of this Shipment.  # noqa: E501

        array of required skills  # noqa: E501

        :return: The required_skills of this Shipment.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_skills

    @required_skills.setter
    def required_skills(self, required_skills):
        """Sets the required_skills of this Shipment.

        array of required skills  # noqa: E501

        :param required_skills: The required_skills of this Shipment.  # noqa: E501
        :type: list[str]
        """

        self._required_skills = required_skills

    @property
    def allowed_vehicles(self):
        """Gets the allowed_vehicles of this Shipment.  # noqa: E501

        array of allowed vehicle ids  # noqa: E501

        :return: The allowed_vehicles of this Shipment.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_vehicles

    @allowed_vehicles.setter
    def allowed_vehicles(self, allowed_vehicles):
        """Sets the allowed_vehicles of this Shipment.

        array of allowed vehicle ids  # noqa: E501

        :param allowed_vehicles: The allowed_vehicles of this Shipment.  # noqa: E501
        :type: list[str]
        """

        self._allowed_vehicles = allowed_vehicles

    @property
    def disallowed_vehicles(self):
        """Gets the disallowed_vehicles of this Shipment.  # noqa: E501

        array of disallowed vehicle ids  # noqa: E501

        :return: The disallowed_vehicles of this Shipment.  # noqa: E501
        :rtype: list[str]
        """
        return self._disallowed_vehicles

    @disallowed_vehicles.setter
    def disallowed_vehicles(self, disallowed_vehicles):
        """Sets the disallowed_vehicles of this Shipment.

        array of disallowed vehicle ids  # noqa: E501

        :param disallowed_vehicles: The disallowed_vehicles of this Shipment.  # noqa: E501
        :type: list[str]
        """

        self._disallowed_vehicles = disallowed_vehicles

    @property
    def max_time_in_vehicle(self):
        """Gets the max_time_in_vehicle of this Shipment.  # noqa: E501

        max time shipment can stay in vehicle  # noqa: E501

        :return: The max_time_in_vehicle of this Shipment.  # noqa: E501
        :rtype: int
        """
        return self._max_time_in_vehicle

    @max_time_in_vehicle.setter
    def max_time_in_vehicle(self, max_time_in_vehicle):
        """Sets the max_time_in_vehicle of this Shipment.

        max time shipment can stay in vehicle  # noqa: E501

        :param max_time_in_vehicle: The max_time_in_vehicle of this Shipment.  # noqa: E501
        :type: int
        """

        self._max_time_in_vehicle = max_time_in_vehicle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Shipment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
